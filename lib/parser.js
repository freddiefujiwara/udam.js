module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "tree": parse_tree,
        "statement": parse_statement,
        "if_statement": parse_if_statement,
        "proc_statement": parse_proc_statement,
        "proc_factor": parse_proc_factor,
        "if_factor": parse_if_factor,
        "proc_expression": parse_proc_expression,
        "if_expression": parse_if_expression,
        "process": parse_process,
        "element": parse_element,
        "character": parse_character,
        "digit": parse_digit,
        "branch_symbol": parse_branch_symbol,
        "end_of_line": parse_end_of_line
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "tree";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_tree() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_statement();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_statement();
        }
        return result0;
      }
      
      function parse_statement() {
        var result0;
        
        result0 = parse_if_statement();
        if (result0 === null) {
          result0 = parse_proc_statement();
        }
        return result0;
      }
      
      function parse_if_statement() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0;
        
        pos0 = pos;
        result0 = parse_if_factor();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 89) {
            result1 = "Y";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"Y\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_branch_symbol();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_branch_symbol();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_proc_factor();
              if (result3 !== null) {
                result4 = parse_end_of_line();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 78) {
                    result5 = "N";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"N\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_end_of_line();
                    if (result6 !== null) {
                      result8 = parse_branch_symbol();
                      if (result8 !== null) {
                        result7 = [];
                        while (result8 !== null) {
                          result7.push(result8);
                          result8 = parse_branch_symbol();
                        }
                      } else {
                        result7 = null;
                      }
                      if (result7 !== null) {
                        result8 = parse_statement();
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos0;
                        }
                      } else {
                        result0 = null;
                        pos = pos0;
                      }
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_proc_statement() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = parse_proc_factor();
        if (result0 !== null) {
          result1 = parse_tree();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_branch_symbol();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_branch_symbol();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_proc_factor() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_proc_expression();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 93) {
              result2 = "]";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_if_factor() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 60) {
          result0 = "<";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_if_expression();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 62) {
              result2 = ">";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_proc_expression() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        result1 = parse_element();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_element();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = pos;
          if (input.charCodeAt(pos) === 32) {
            result2 = " ";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result2 !== null) {
            result4 = parse_element();
            if (result4 !== null) {
              result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_element();
              }
            } else {
              result3 = null;
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = pos;
            if (input.charCodeAt(pos) === 32) {
              result2 = " ";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            if (result2 !== null) {
              result4 = parse_element();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_element();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_if_expression() {
        var result0, result1;
        
        result1 = parse_element();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_element();
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_process() {
        var result0;
        
        if (input.substr(pos, 6) === "output") {
          result0 = "output";
          pos += 6;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"output\"");
          }
        }
        return result0;
      }
      
      function parse_element() {
        var result0;
        
        result0 = parse_character();
        if (result0 === null) {
          result0 = parse_digit();
          if (result0 === null) {
            if (input.charCodeAt(pos) === 45) {
              result0 = "-";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 95) {
                result0 = "_";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_character() {
        var result0;
        
        if (input.charCodeAt(pos) === 97) {
          result0 = "a";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"a\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 98) {
            result0 = "b";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"b\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 99) {
              result0 = "c";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"c\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 100) {
                result0 = "d";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"d\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 101) {
                  result0 = "e";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"e\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 102) {
                    result0 = "f";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"f\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 103) {
                      result0 = "g";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"g\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 104) {
                        result0 = "h";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"h\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 105) {
                          result0 = "i";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"i\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 106) {
                            result0 = "j";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"j\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 107) {
                              result0 = "k";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"k\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 108) {
                                result0 = "l";
                                pos++;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"l\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 109) {
                                  result0 = "m";
                                  pos++;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"m\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.charCodeAt(pos) === 110) {
                                    result0 = "n";
                                    pos++;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"n\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.charCodeAt(pos) === 111) {
                                      result0 = "o";
                                      pos++;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"o\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.charCodeAt(pos) === 112) {
                                        result0 = "p";
                                        pos++;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"p\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.charCodeAt(pos) === 113) {
                                          result0 = "q";
                                          pos++;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"q\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.charCodeAt(pos) === 114) {
                                            result0 = "r";
                                            pos++;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"r\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.charCodeAt(pos) === 115) {
                                              result0 = "s";
                                              pos++;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"s\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.charCodeAt(pos) === 116) {
                                                result0 = "t";
                                                pos++;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"t\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.charCodeAt(pos) === 117) {
                                                  result0 = "u";
                                                  pos++;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"u\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.charCodeAt(pos) === 118) {
                                                    result0 = "v";
                                                    pos++;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"v\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.charCodeAt(pos) === 119) {
                                                      result0 = "w";
                                                      pos++;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"w\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.charCodeAt(pos) === 120) {
                                                        result0 = "x";
                                                        pos++;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"x\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.charCodeAt(pos) === 121) {
                                                          result0 = "y";
                                                          pos++;
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"y\"");
                                                          }
                                                        }
                                                        if (result0 === null) {
                                                          if (input.charCodeAt(pos) === 90) {
                                                            result0 = "Z";
                                                            pos++;
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"Z\"");
                                                            }
                                                          }
                                                          if (result0 === null) {
                                                            if (input.charCodeAt(pos) === 65) {
                                                              result0 = "A";
                                                              pos++;
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"A\"");
                                                              }
                                                            }
                                                            if (result0 === null) {
                                                              if (input.charCodeAt(pos) === 66) {
                                                                result0 = "B";
                                                                pos++;
                                                              } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"B\"");
                                                                }
                                                              }
                                                              if (result0 === null) {
                                                                if (input.charCodeAt(pos) === 67) {
                                                                  result0 = "C";
                                                                  pos++;
                                                                } else {
                                                                  result0 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("\"C\"");
                                                                  }
                                                                }
                                                                if (result0 === null) {
                                                                  if (input.charCodeAt(pos) === 68) {
                                                                    result0 = "D";
                                                                    pos++;
                                                                  } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("\"D\"");
                                                                    }
                                                                  }
                                                                  if (result0 === null) {
                                                                    if (input.charCodeAt(pos) === 69) {
                                                                      result0 = "E";
                                                                      pos++;
                                                                    } else {
                                                                      result0 = null;
                                                                      if (reportFailures === 0) {
                                                                        matchFailed("\"E\"");
                                                                      }
                                                                    }
                                                                    if (result0 === null) {
                                                                      if (input.charCodeAt(pos) === 70) {
                                                                        result0 = "F";
                                                                        pos++;
                                                                      } else {
                                                                        result0 = null;
                                                                        if (reportFailures === 0) {
                                                                          matchFailed("\"F\"");
                                                                        }
                                                                      }
                                                                      if (result0 === null) {
                                                                        if (input.charCodeAt(pos) === 71) {
                                                                          result0 = "G";
                                                                          pos++;
                                                                        } else {
                                                                          result0 = null;
                                                                          if (reportFailures === 0) {
                                                                            matchFailed("\"G\"");
                                                                          }
                                                                        }
                                                                        if (result0 === null) {
                                                                          if (input.charCodeAt(pos) === 72) {
                                                                            result0 = "H";
                                                                            pos++;
                                                                          } else {
                                                                            result0 = null;
                                                                            if (reportFailures === 0) {
                                                                              matchFailed("\"H\"");
                                                                            }
                                                                          }
                                                                          if (result0 === null) {
                                                                            if (input.charCodeAt(pos) === 73) {
                                                                              result0 = "I";
                                                                              pos++;
                                                                            } else {
                                                                              result0 = null;
                                                                              if (reportFailures === 0) {
                                                                                matchFailed("\"I\"");
                                                                              }
                                                                            }
                                                                            if (result0 === null) {
                                                                              if (input.charCodeAt(pos) === 74) {
                                                                                result0 = "J";
                                                                                pos++;
                                                                              } else {
                                                                                result0 = null;
                                                                                if (reportFailures === 0) {
                                                                                  matchFailed("\"J\"");
                                                                                }
                                                                              }
                                                                              if (result0 === null) {
                                                                                if (input.charCodeAt(pos) === 75) {
                                                                                  result0 = "K";
                                                                                  pos++;
                                                                                } else {
                                                                                  result0 = null;
                                                                                  if (reportFailures === 0) {
                                                                                    matchFailed("\"K\"");
                                                                                  }
                                                                                }
                                                                                if (result0 === null) {
                                                                                  if (input.charCodeAt(pos) === 76) {
                                                                                    result0 = "L";
                                                                                    pos++;
                                                                                  } else {
                                                                                    result0 = null;
                                                                                    if (reportFailures === 0) {
                                                                                      matchFailed("\"L\"");
                                                                                    }
                                                                                  }
                                                                                  if (result0 === null) {
                                                                                    if (input.charCodeAt(pos) === 77) {
                                                                                      result0 = "M";
                                                                                      pos++;
                                                                                    } else {
                                                                                      result0 = null;
                                                                                      if (reportFailures === 0) {
                                                                                        matchFailed("\"M\"");
                                                                                      }
                                                                                    }
                                                                                    if (result0 === null) {
                                                                                      if (input.charCodeAt(pos) === 78) {
                                                                                        result0 = "N";
                                                                                        pos++;
                                                                                      } else {
                                                                                        result0 = null;
                                                                                        if (reportFailures === 0) {
                                                                                          matchFailed("\"N\"");
                                                                                        }
                                                                                      }
                                                                                      if (result0 === null) {
                                                                                        if (input.charCodeAt(pos) === 79) {
                                                                                          result0 = "O";
                                                                                          pos++;
                                                                                        } else {
                                                                                          result0 = null;
                                                                                          if (reportFailures === 0) {
                                                                                            matchFailed("\"O\"");
                                                                                          }
                                                                                        }
                                                                                        if (result0 === null) {
                                                                                          if (input.charCodeAt(pos) === 80) {
                                                                                            result0 = "P";
                                                                                            pos++;
                                                                                          } else {
                                                                                            result0 = null;
                                                                                            if (reportFailures === 0) {
                                                                                              matchFailed("\"P\"");
                                                                                            }
                                                                                          }
                                                                                          if (result0 === null) {
                                                                                            if (input.charCodeAt(pos) === 81) {
                                                                                              result0 = "Q";
                                                                                              pos++;
                                                                                            } else {
                                                                                              result0 = null;
                                                                                              if (reportFailures === 0) {
                                                                                                matchFailed("\"Q\"");
                                                                                              }
                                                                                            }
                                                                                            if (result0 === null) {
                                                                                              if (input.charCodeAt(pos) === 82) {
                                                                                                result0 = "R";
                                                                                                pos++;
                                                                                              } else {
                                                                                                result0 = null;
                                                                                                if (reportFailures === 0) {
                                                                                                  matchFailed("\"R\"");
                                                                                                }
                                                                                              }
                                                                                              if (result0 === null) {
                                                                                                if (input.charCodeAt(pos) === 83) {
                                                                                                  result0 = "S";
                                                                                                  pos++;
                                                                                                } else {
                                                                                                  result0 = null;
                                                                                                  if (reportFailures === 0) {
                                                                                                    matchFailed("\"S\"");
                                                                                                  }
                                                                                                }
                                                                                                if (result0 === null) {
                                                                                                  if (input.charCodeAt(pos) === 84) {
                                                                                                    result0 = "T";
                                                                                                    pos++;
                                                                                                  } else {
                                                                                                    result0 = null;
                                                                                                    if (reportFailures === 0) {
                                                                                                      matchFailed("\"T\"");
                                                                                                    }
                                                                                                  }
                                                                                                  if (result0 === null) {
                                                                                                    if (input.charCodeAt(pos) === 85) {
                                                                                                      result0 = "U";
                                                                                                      pos++;
                                                                                                    } else {
                                                                                                      result0 = null;
                                                                                                      if (reportFailures === 0) {
                                                                                                        matchFailed("\"U\"");
                                                                                                      }
                                                                                                    }
                                                                                                    if (result0 === null) {
                                                                                                      if (input.charCodeAt(pos) === 86) {
                                                                                                        result0 = "V";
                                                                                                        pos++;
                                                                                                      } else {
                                                                                                        result0 = null;
                                                                                                        if (reportFailures === 0) {
                                                                                                          matchFailed("\"V\"");
                                                                                                        }
                                                                                                      }
                                                                                                      if (result0 === null) {
                                                                                                        if (input.charCodeAt(pos) === 87) {
                                                                                                          result0 = "W";
                                                                                                          pos++;
                                                                                                        } else {
                                                                                                          result0 = null;
                                                                                                          if (reportFailures === 0) {
                                                                                                            matchFailed("\"W\"");
                                                                                                          }
                                                                                                        }
                                                                                                        if (result0 === null) {
                                                                                                          if (input.charCodeAt(pos) === 88) {
                                                                                                            result0 = "X";
                                                                                                            pos++;
                                                                                                          } else {
                                                                                                            result0 = null;
                                                                                                            if (reportFailures === 0) {
                                                                                                              matchFailed("\"X\"");
                                                                                                            }
                                                                                                          }
                                                                                                          if (result0 === null) {
                                                                                                            if (input.charCodeAt(pos) === 89) {
                                                                                                              result0 = "Y";
                                                                                                              pos++;
                                                                                                            } else {
                                                                                                              result0 = null;
                                                                                                              if (reportFailures === 0) {
                                                                                                                matchFailed("\"Y\"");
                                                                                                              }
                                                                                                            }
                                                                                                            if (result0 === null) {
                                                                                                              if (input.charCodeAt(pos) === 90) {
                                                                                                                result0 = "Z";
                                                                                                                pos++;
                                                                                                              } else {
                                                                                                                result0 = null;
                                                                                                                if (reportFailures === 0) {
                                                                                                                  matchFailed("\"Z\"");
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_digit() {
        var result0;
        
        if (input.charCodeAt(pos) === 48) {
          result0 = "0";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 49) {
            result0 = "1";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"1\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 50) {
              result0 = "2";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"2\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 51) {
                result0 = "3";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"3\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 52) {
                  result0 = "4";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"4\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 53) {
                    result0 = "5";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"5\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 54) {
                      result0 = "6";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"6\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 55) {
                        result0 = "7";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"7\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 56) {
                          result0 = "8";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"8\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 57) {
                            result0 = "9";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"9\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_branch_symbol() {
        var result0;
        
        if (input.charCodeAt(pos) === 124) {
          result0 = "|";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"|\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 45) {
            result0 = "-";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 === null) {
            result0 = parse_end_of_line();
          }
        }
        return result0;
      }
      
      function parse_end_of_line() {
        var result0;
        
        if (input.charCodeAt(pos) === 10) {
          result0 = "\n";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
